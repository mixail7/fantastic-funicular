 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/user_blogs", type: :request do
  # UserBlog. As you add validations to UserBlog, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {author: "U", title: "T"}
  }

  let(:invalid_attributes) {
    {title: "T2"}
  }

  describe "GET /index" do
    it "renders a successful response" do
      UserBlog.create! valid_attributes
      get user_blogs_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      user_blog = UserBlog.create! valid_attributes
      get user_blog_url(user_blog)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_user_blog_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      user_blog = UserBlog.create! valid_attributes
      get edit_user_blog_url(user_blog)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new UserBlog" do
        expect {
          post user_blogs_url, params: { user_blog: valid_attributes }
        }.to change(UserBlog, :count).by(1)
      end

      it "redirects to the created user_blog" do
        post user_blogs_url, params: { user_blog: valid_attributes }
        expect(response).to redirect_to(user_blog_url(UserBlog.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new UserBlog" do
        expect {
          post user_blogs_url, params: { user_blog: invalid_attributes }
        }.to change(UserBlog, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post user_blogs_url, params: { user_blog: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {author: "U2", title: "New T"}
      }

      it "updates the requested user_blog" do
        user_blog = UserBlog.create! valid_attributes
        patch user_blog_url(user_blog), params: { user_blog: new_attributes }
        user_blog.reload
        expect(user_blog.title).to eq(new_attributes[:title])
      end

      it "redirects to the user_blog" do
        user_blog = UserBlog.create! valid_attributes
        patch user_blog_url(user_blog), params: { user_blog: new_attributes }
        user_blog.reload
        expect(response).to redirect_to(user_blog_url(user_blog))
      end
    end

    context "with invalid parameters" do

    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested user_blog" do
      user_blog = UserBlog.create! valid_attributes
      expect {
        delete user_blog_url(user_blog)
      }.to change(UserBlog, :count).by(-1)
    end

    it "redirects to the user_blogs list" do
      user_blog = UserBlog.create! valid_attributes
      delete user_blog_url(user_blog)
      expect(response).to redirect_to(user_blogs_url)
    end
  end
end
